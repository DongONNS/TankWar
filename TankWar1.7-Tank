import java.awt.Color;
import java.awt.Graphics;
import java.awt.Rectangle;
import java.awt.event.KeyEvent;


public class Tank {
		public static final int XSPEED=5;
		public static final int YSPEED=5;
		//设置坦克的宽度和高度；
		public static final int WIDTH = 30;
		public static final int HEIGHT = 30;
		
		//定义一个量用来判断敌方坦克的生死；
		private boolean live = true;
		//生成相应的setter和getter方法，用于检验坦克的存活情况；
		public boolean isLive() {
			return live;
		}

		public void setLive(boolean live) {
			this.live = live;
		}

		//增加一个量用来区分敌方坦克 
		private boolean good;
		
		TankClient tc;
		
		private int x,y;
		private boolean bL=false,bU=false,bR=false,bD=false;
		
		enum Direction {L,LU,U,RU,R,RD,D,LD,STOP};
		
		//此处定义的是坦克方向，默认是静止的；
		private Direction dir = Direction.STOP;//默认状态为静止不动
		//此处定义的是炮筒方向，默认向下；
		private Direction ptdir = Direction.D;
		
		
		public Tank(int x, int y,boolean good) {
			this.x = x;
			this.y = y;
			this.good = good;
		}
		
		public Tank(int x,int y,boolean good,TankClient tc){
			this(x, y,good);
			this.tc = tc;
		}
		
		
		void move(){
			switch (dir) {
			case L:
				x-=XSPEED;
				break;
			case LU:
				x-=(XSPEED/1.414);
				y-=(YSPEED/1.414);
				break;	
			case U:
				y-=XSPEED;
				break;
			case RU:
				x+=(XSPEED/1.414);
				y-=(YSPEED/1.414);
				break;
			case R:
				x+=XSPEED;
				break;
			case RD:
				x+=(XSPEED/1.414);
				y+=(YSPEED/1.414);
				break;
			case D:
				y+=YSPEED;		
				break;
			case LD:
				x-=(XSPEED/1.414);
				y+=(YSPEED/1.414);
				break;
			case STOP:
				break;
			}
			if (this.dir!=Direction.STOP) {
				ptdir=this.dir;
			}
			if(x<0) x=0;
			if(y<30) y=30;
			if(x+Tank.WIDTH>TankClient.GAME_WIDTH)   x = TankClient.GAME_WIDTH-Tank.WIDTH;
			if(y+Tank.HEIGHT>TankClient.GAME_HEIGHT) y = TankClient.GAME_HEIGHT-Tank.HEIGHT;
			
		}
		//画坦克的方向
		public void draw(Graphics g){
			//如果这辆坦克已经死了，那就不用画出来了；
			if(!live) {
				if (!good) {
					tc.tanks.remove(this);
				}
				return ;
			} 
			
			Color c =g.getColor();
			//我方坦克设为红色，敌方坦克设为蓝色；
			if(good)	g.setColor(Color.RED);
			else g.setColor(Color.BLUE);
			
			g.fillOval(x, y, WIDTH,HEIGHT);
			g.setColor(c);
			//炮筒的方向
			switch (ptdir) {
			case L:
				g.drawLine(x+Tank.WIDTH/2, y+Tank.HEIGHT/2, x, y+Tank.HEIGHT/2);
				break;
			case LU:
				g.drawLine(x+Tank.WIDTH/2, y+Tank.HEIGHT/2, x, y);
				break;	
			case U:
				g.drawLine(x+Tank.WIDTH/2, y+Tank.HEIGHT/2, x+Tank.WIDTH/2, y);
				break;
			case RU:
				g.drawLine(x+Tank.WIDTH/2, y+Tank.HEIGHT/2, x+Tank.WIDTH, y);
				break;
			case R:
				g.drawLine(x+Tank.WIDTH/2, y+Tank.HEIGHT/2, x+Tank.WIDTH, y+Tank.HEIGHT/2);
				break;
			case RD:
				g.drawLine(x+Tank.WIDTH/2, y+Tank.HEIGHT/2, x+Tank.WIDTH, y+Tank.HEIGHT);
				break;
			case D:
				g.drawLine(x+Tank.WIDTH/2, y+Tank.HEIGHT/2, x+Tank.WIDTH/2, y+Tank.HEIGHT);
				break;
			case LD:
				g.drawLine(x+Tank.WIDTH/2, y+Tank.HEIGHT/2, x, y+Tank.HEIGHT);
				break;
			case STOP:
				break;
			}
			move();
		}
		
		public void keyPressed(KeyEvent e){
			int key = e.getKeyCode();
			switch (key) {
			case KeyEvent.VK_LEFT:
				bL=true;
				break;
			case KeyEvent.VK_RIGHT:
				bR=true;
				break;
			case KeyEvent.VK_UP:
				bU=true;
				break;
			case KeyEvent.VK_DOWN:
				bD=true;
				break;
			}
			locateDirection();
		}
		void locateDirection(){
			if (bL && !bU && !bD && !bR) dir = Direction.L;
			else if (bL && bU && !bD && !bR) dir = Direction.LU;
			else if (!bL && bU && !bD && !bR) dir = Direction.U;
			else if (!bL && bU && !bD && bR) dir = Direction.RU;
			else if (!bL && !bU && !bD && bR) dir = Direction.R;
			else if (!bL && !bU && bD && bR) dir = Direction.RD;
			else if (!bL && !bU && bD && !bR) dir = Direction.D;
			else if (bL && !bU && bD && !bR) dir = Direction.LD;
			else if (!bL && !bU && !bD && !bR) dir = Direction.STOP;
			
		}

		public void keyReleased(KeyEvent e) {
			int key = e.getKeyCode();
			switch (key) {
			case KeyEvent.VK_CONTROL:
				 fire();
				break;
			case KeyEvent.VK_LEFT:
				bL=false;
				break;
			case KeyEvent.VK_RIGHT:
				bR=false;
				break;
			case KeyEvent.VK_UP:
				bU=false;
				break;
			case KeyEvent.VK_DOWN:
				bD=false;
				break;
			}
			locateDirection();
		}
		public Missle fire(){
			int x = this.x+Tank.WIDTH/2-Missle.WIDTH/2;
			int y = this.y+Tank.HEIGHT/2-Missle.HEIGHT/2;
			Missle m = new Missle(x,y, ptdir,this.tc);
			tc.missles.add(m);
			return m;
		}
		
		//碰撞检测
		public Rectangle getRect() {
			return new Rectangle(x,y,WIDTH,HEIGHT);
		}
}
